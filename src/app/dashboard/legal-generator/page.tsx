// src/app/dashboard/legal-generator/page.tsx
"use client";

import { useState } from "react";
import { useForm, type SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Loader2, Shield, Clipboard, AlertTriangle } from "lucide-react";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { generateLegalDocument, GenerateLegalDocumentInput } from "@/ai/flows/generate-legal-document";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";

const formSchema = z.object({
  companyName: z.string().min(2, "Company name is required."),
  websiteUrl: z.string().url("Please enter a valid URL."),
  niche: z.string().min(3, "Please describe your niche."),
  country: z.string().min(2, "Country is required."),
  documentType: z.enum(['Privacy Policy', 'Terms of Service']),
});

type FormValues = z.infer<typeof formSchema>;

export default function LegalGeneratorPage() {
  const [generatedDocument, setGeneratedDocument] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      companyName: "",
      websiteUrl: "",
      niche: "",
      country: "USA",
      documentType: "Privacy Policy",
    },
  });

  const onSubmit: SubmitHandler<FormValues> = async (data) => {
    setIsLoading(true);
    setGeneratedDocument("");
    try {
      const result = await generateLegalDocument(data as GenerateLegalDocumentInput);
      setGeneratedDocument(result.document);
    } catch (error) {
      console.error("Error generating legal document:", error);
      toast({
        title: "Error",
        description: "Failed to generate document. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const copyToClipboard = () => {
    if (!generatedDocument) return;
    navigator.clipboard.writeText(generatedDocument);
    toast({
      title: "Copied to clipboard!",
      description: "The legal document has been copied.",
    });
  };

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-headline font-bold">AI Legal Document Generator</h1>
        <p className="text-muted-foreground max-w-2xl">
          Create a baseline Privacy Policy or Terms of Service for your website.
        </p>
      </div>
      
       <Alert variant="warning">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Not Legal Advice</AlertTitle>
          <AlertDescription>
            The documents generated by this tool are for informational purposes only and are not a substitute for professional legal advice. Always consult with a qualified lawyer to ensure your documents are compliant and suit your specific needs.
          </AlertDescription>
        </Alert>
        
      <div className="grid gap-8 md:grid-cols-2 items-start">
        <Card>
          <CardHeader>
            <CardTitle>Document Details</CardTitle>
            <CardDescription>Fill in the details below to generate your legal document.</CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                <FormField
                  control={form.control}
                  name="companyName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Company / Website Name</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., Acme Inc." {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="websiteUrl"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Website URL</FormLabel>
                      <FormControl>
                        <Input placeholder="https://www.example.com" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="niche"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Niche / Industry</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., 'E-commerce store for handmade goods'" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="grid grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="country"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Country of Operation</FormLabel>
                         <FormControl>
                          <Input placeholder="e.g., USA" {...field} />
                        </FormControl>
                         <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="documentType"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Document Type</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select a type" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="Privacy Policy">Privacy Policy</SelectItem>
                            <SelectItem value="Terms of Service">Terms of Service</SelectItem>
                          </SelectContent>
                        </Select>
                      </FormItem>
                    )}
                  />
                </div>

                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Shield className="mr-2 h-4 w-4" />
                      Generate Document
                    </>
                  )}
                </Button>
              </form>
            </Form>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between">
            <div>
              <CardTitle>Generated Document</CardTitle>
              <CardDescription>Your AI-generated document will appear here.</CardDescription>
            </div>
            {generatedDocument && (
              <Button variant="outline" size="icon" onClick={copyToClipboard} aria-label="Copy to clipboard">
                <Clipboard className="h-4 w-4" />
              </Button>
            )}
          </CardHeader>
          <CardContent>
            <div className="h-[600px] overflow-y-auto rounded-md border bg-muted/50 p-4">
              {isLoading && (
                <div className="flex flex-col items-center justify-center h-full">
                  <Loader2 className="h-8 w-8 animate-spin text-primary" />
                  <p className="mt-4 text-muted-foreground">AI is drafting your document...</p>
                </div>
              )}
              {!isLoading && !generatedDocument && (
                <div className="flex flex-col items-center justify-center h-full text-center">
                  <Shield className="h-12 w-12 text-muted-foreground" />
                  <p className="mt-4 text-muted-foreground">Your generated document will be displayed here.</p>
                </div>
              )}
              {generatedDocument && (
                <Textarea
                    value={generatedDocument}
                    readOnly
                    className="prose prose-sm dark:prose-invert max-w-none h-full resize-none bg-transparent border-none focus-visible:ring-0"
                />
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
